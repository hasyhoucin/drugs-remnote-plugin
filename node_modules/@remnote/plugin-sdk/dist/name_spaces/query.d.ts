import { CheckboxMatcher, DateMatcher, MultiSelectMatcher, NumberMatcher, QueryRemType, RelativeDateMatcher, RelativeDateModifier, RelativeDatePeriod, RemId, SearchPortalCheckboxQueryExpression, SearchPortalDateQueryExpression, SearchPortalMultiSelectQueryExpression, SearchPortalNumberQueryExpression, SearchPortalQuery, SearchPortalRefQueryExpression, SearchPortalRemTypeQueryExpression, SearchPortalSingleSelectQueryExpression, SearchPortalSlotQueryNode, SearchPortalTextQueryExpression, SingleSelectMatcher, TextMatcher } from '..';
/**
 * A class for building queries.
 * Combine multiple query expressions using the `and`, `or` and `not` methods.
 * For table filters, you should use the `tableColumn` method to specify which column should be matched against.
 * @example
 * // Find all Rem containing the text "hello".
 * const query = Query.text(TextMatcher.Contains, 'hello');
 * @example
 * // Find all Rem containing the text "hello" and "world".
 * const query = Query.and([
 *  Query.text(TextMatcher.Contains, 'hello'),
 *  Query.text(TextMatcher.Contains, 'world'),
 * ]);
 * @example
 * // Filter a table to show only Rem where the `column-id` column contains the text "hello" or "world".
 * const query = Query.tableColumn('column-id', Query.or([
 *  Query.text(TextMatcher.Contains, 'hello'),
 *  Query.text(TextMatcher.Contains, 'world'),
 * ]));
 */
export declare class Query {
    static and(queryExpressions: SearchPortalQuery[]): SearchPortalQuery;
    static or(queryExpressions: SearchPortalQuery[]): SearchPortalQuery;
    static not(queryExpressions: SearchPortalQuery): SearchPortalQuery;
    /**
     * Match the contents of a table column.
     * @param columnId  The remId of the column property.
     * @param query   The query to match.
     * @example
     * // Create a table filter to show only Rem where the `column-id` column contains the text "hello".
     * const query = Query.tableColumn('column-id', Query.text(TextMatcher.Contains, 'hello'));
     */
    static tableColumn(columnId: RemId, query: SearchPortalQuery): SearchPortalSlotQueryNode;
    /**
     * Find all Rem that which reference a specific Rem.
     * @param remId The remId of the Rem to find references to.
     */
    static hasReferenceTo(remId: RemId): SearchPortalRefQueryExpression;
    /**
     * Find all Rem containing a specific text.
     * @param matcherType The type of string matching to use.
     */
    static text<Matcher extends TextMatcher.IsEmpty | TextMatcher.IsNotEmpty>(matches: Matcher): SearchPortalTextQueryExpression;
    static text<Matcher extends TextMatcher>(matches: Matcher, text: string): SearchPortalTextQueryExpression;
    /**
     * Find all documents that contain a specific rem.
     */
    static documentsThatContain(remId: RemId): SearchPortalRefQueryExpression;
    /**
     * Includes inherited tags.
     * @param remId The remId of the tag.
     */
    static isTaggedWith(remId: RemId): SearchPortalRefQueryExpression;
    static isDirectlyTaggedWith(remId: RemId): SearchPortalRefQueryExpression;
    /**
     * Get all Rem that are descendants of a particular Rem.
     * @param remId The remId of the ancestor Rem.
     */
    static isDescendantOf(remId: RemId): SearchPortalRefQueryExpression;
    /**
     * Get all Rem that are in a particular document.
     * @param remId The remId of the document.
     */
    static isInDocument(remId: RemId | undefined): SearchPortalRefQueryExpression;
    /**
     * TODO
     */
    static hasAnyConnectionTo(remId: RemId | undefined): SearchPortalRefQueryExpression;
    /**
     * Get all Rem of a particular type.
     * @param remType The type of rem to include.
     */
    static hasRemType(remType: QueryRemType): SearchPortalRemTypeQueryExpression;
    static tagWithoutInheritance(remId: RemId): SearchPortalRefQueryExpression;
    /**
     * Matches a multi-select column.
     */
    static multiSelect<Matcher extends MultiSelectMatcher.IsEmpty | MultiSelectMatcher.IsNotEmpty>(matches: Matcher): SearchPortalMultiSelectQueryExpression;
    static multiSelect<Matcher extends MultiSelectMatcher>(matches: Matcher, remIds: RemId[]): SearchPortalMultiSelectQueryExpression;
    /**
     * Matches a single-select column.
     */
    static singleSelect<Matcher extends SingleSelectMatcher.IsEmpty | SingleSelectMatcher.IsNotEmpty>(matches: Matcher): SearchPortalSingleSelectQueryExpression;
    static singleSelect<Matcher extends SingleSelectMatcher>(matches: Matcher, remIds: RemId[]): SearchPortalSingleSelectQueryExpression;
    /**
     * Matches a checkbox column.
     */
    static checkbox(matches: CheckboxMatcher): SearchPortalCheckboxQueryExpression;
    /**
     * Matches an empty or non-empty date column.
     */
    static date<Matcher extends DateMatcher.IsEmpty | DateMatcher.IsNotEmpty>(matches: Matcher): SearchPortalDateQueryExpression;
    /**
     * Matches a date column with a specific or relative date.
     * @param date either a date object or a `RelativeDateMatcher`.
     */
    static date<Matcher extends DateMatcher.IsAfter | DateMatcher.IsBefore | DateMatcher.Is | DateMatcher.IsOnOrAfter | DateMatcher.IsOnOrBefore>(matches: Matcher, date: Date | RelativeDateMatcher): SearchPortalDateQueryExpression;
    /**
     * Matches a date column with a value between two dates.
     * @param date1 either a date object or a `RelativeDateMatcher`.
     * @param date2 either a date object or a `RelativeDateMatcher`.
     */
    static date<Matcher extends DateMatcher.IsBetween>(matches: Matcher, date1: Date | RelativeDateMatcher, date2: Date | RelativeDateMatcher): SearchPortalDateQueryExpression;
    /**
     * Matches a date column relative to the current date.
     * @param relativeDateModifier The modifier to use.
     * @param relativeDatePeriod The period to use.
     * @param daysOffset The day offset to use.
     */
    static dateRelativeToToday<Modifier extends RelativeDateModifier.This>(relativeDateModifier: Modifier, relativeDatePeriod: RelativeDatePeriod): SearchPortalDateQueryExpression;
    static dateRelativeToToday<Modifier extends RelativeDateModifier.Past | RelativeDateModifier.Next>(relativeDateModifier: Modifier, relativeDatePeriod: RelativeDatePeriod, daysOffset: number): SearchPortalDateQueryExpression;
    /**
     * Matches a number column.
     */
    static number<Matcher extends NumberMatcher.IsEmpty | NumberMatcher.IsNotEmpty>(matches: Matcher): SearchPortalNumberQueryExpression;
    static number<Matcher extends NumberMatcher>(matches: Matcher, n: number): SearchPortalNumberQueryExpression;
}
